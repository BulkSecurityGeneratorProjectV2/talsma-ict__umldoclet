/*
 * Copyright 2016-2018 Talsma ICT
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package nl.talsmasoftware.umldoclet.html;

import nl.talsmasoftware.umldoclet.logging.Logger;

import java.io.File;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Optional;

import static java.util.Objects.requireNonNull;
import static nl.talsmasoftware.umldoclet.logging.Message.DEBUG_POSTPROCESSING_FILE;
import static nl.talsmasoftware.umldoclet.logging.Message.DEBUG_SKIPPING_FILE;

/**
 * Abstraction for a single HTML file generated by the Standard doclet.
 *
 * @author Sjoerd Talsma
 */
final class HtmlFile {

    private final Logger logger;
    private final Path path;

    HtmlFile(Logger logger, Path path) {
        this.logger = requireNonNull(logger, "Logger is <null>.");
        this.path = requireNonNull(path, "HTML file is <null>.");
    }

    static boolean matches(Path path) {
        return Optional.ofNullable(path).map(Path::toFile)
                .filter(File::isFile).filter(File::canRead)
                .map(File::getName).filter(name -> name.endsWith(".html"))
                .isPresent();
    }

    boolean process(Collection<Diagram> diagrams) {
        return diagrams.stream()
                .filter(diagram -> diagram.correspondsWith(path))
                .findFirst()
                .map(this::process)
                .orElseGet(this::skip);
    }

    private boolean skip() {
        logger.debug(DEBUG_SKIPPING_FILE, path);
        return true;
    }

    private boolean process(Diagram diagram) {
        logger.debug(DEBUG_POSTPROCESSING_FILE, path);
        // TODO actually postprocess the HTML
        return true;
    }

}
